<@include gpu/Config.slh@>
<$VERSION_HEADER$>
//  Generated on <$_SCRIBE_DATE$>
//
//  simple_transparent.frag
//  fragment shader
//
//  Created by Andrzej Kapolka on 9/15/14.
//  Copyright 2014 High Fidelity, Inc.
//
//  Distributed under the Apache License, Version 2.0.
//  See the accompanying file LICENSE or http://www.apache.org/licenses/LICENSE-2.0.html
//

<@include DeferredBufferWrite.slh@>

// the interpolated normal
in vec3 _normalWS;
in vec3 _normalMS;
in vec4 _color;
in vec2 _texCoord0;
in vec4 _positionMS;
in vec4 _positionES;

// For retro-compatibility
#define _normal      _normalWS
#define _modelNormal _normalMS
#define _position    _positionMS
#define _eyePosition _positionES

//PROCEDURAL_COMMON_BLOCK

#line 1001
//PROCEDURAL_BLOCK

#line 2030
void main(void) {
    vec3 normal = normalize(_normalWS.xyz);
    vec3 diffuse = _color.rgb;
    vec3 specular = DEFAULT_SPECULAR;
    float shininess = DEFAULT_SHININESS;
    float emissiveAmount = 0.0;
    
#ifdef PROCEDURAL

#ifdef PROCEDURAL_V1
    specular = getProceduralColor().rgb;
    // Procedural Shaders are expected to be Gamma corrected so let's bring back the RGB in linear space for the rest of the pipeline
    //specular = pow(specular, vec3(2.2));
    emissiveAmount = 1.0;
#else
    emissiveAmount = getProceduralColors(diffuse, specular, shininess);
#endif

#endif

    if (emissiveAmount > 0.0) {
        packDeferredFragmentTranslucent(
            normal,
            _color.a,
            specular,
            DEFAULT_FRESNEL,
            DEFAULT_ROUGHNESS);
    } else {
        packDeferredFragmentTranslucent(
            normal,
            _color.a,
            diffuse,
            DEFAULT_FRESNEL,
            DEFAULT_ROUGHNESS);
    }
}
