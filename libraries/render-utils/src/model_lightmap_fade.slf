<@include gpu/Config.slh@>
<$VERSION_HEADER$>
//  Generated on <$_SCRIBE_DATE$>
//
//  model_lightmap_fade.frag
//  fragment shader
//
//  Created by Olivier Prat on 06/05/17.
//  Copyright 2017 High Fidelity, Inc.
//
//  Distributed under the Apache License, Version 2.0.
//  See the accompanying file LICENSE or http://www.apache.org/licenses/LICENSE-2.0.html
//

<@include DeferredBufferWrite.slh@>

<@include graphics/Material.slh@>

<@include MaterialTextures.slh@>
<$declareMaterialTextures(ALBEDO, ROUGHNESS, _SCRIBE_NULL, METALLIC)$>
<$declareMaterialLightmap()$>

<@include Fade.slh@>
<$declareFadeFragment()$>

in vec2 _texCoord0;
in vec2 _texCoord1;
in vec3 _normalWS;
in vec3 _color;
in vec4 _positionWS;

void main(void) {
    vec3 fadeEmissive;
    FadeObjectParams fadeParams;

    <$fetchFadeObjectParams(fadeParams)$>
    applyFade(fadeParams, _positionWS.xyz, fadeEmissive);

    Material mat = getMaterial();
    BITFIELD matKey = getMaterialKey(mat);
    <$fetchMaterialTexturesCoord0(matKey, _texCoord0, albedo, roughness, _SCRIBE_NULL, metallicTex)$>
    <$fetchMaterialTexturesCoord1(matKey, _texCoord1, _SCRIBE_NULL, lightmapVal)$>

    packDeferredFragmentLightmap(
        normalize(_normalWS), 
        evalOpaqueFinalAlpha(getMaterialOpacity(mat), albedo.a),
        getMaterialAlbedo(mat) * albedo.rgb * _color,
        getMaterialRoughness(mat) * roughness,
        getMaterialMetallic(mat) * metallicTex,
        /*metallicTex, // no use of */getMaterialFresnel(mat),
        lightmapVal+fadeEmissive);
}
